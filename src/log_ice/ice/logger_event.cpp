// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `logger_event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef LOG_ICE_API_EXPORTS
#   define LOG_ICE_API_EXPORTS
#endif
#include <log_ice/ice/logger_event.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __loggerice__loggereventif__sendevent_name = "sendevent";

ICE_DECLSPEC_EXPORT ::Ice::Object* IceInternal::upCast(::loggerice::loggerevent* p) { return p; }
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::loggerice::loggerevent* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::Object* IceInternal::upCast(::loggerice::loggereventif* p) { return p; }
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::loggerice::loggereventif* p) { return p; }

void
loggerice::__read(::IceInternal::BasicStream* __is, ::loggerice::loggereventPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::loggerice::loggerevent;
        v->__copyFrom(proxy);
    }
}

void
loggerice::__read(::IceInternal::BasicStream* __is, ::loggerice::loggereventifPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::loggerice::loggereventif;
        v->__copyFrom(proxy);
    }
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::loggerice::loggerevent;
#endif

const ::std::string&
IceProxy::loggerice::loggerevent::ice_staticId()
{
    return ::loggerice::loggerevent::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::loggerice::loggerevent::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::loggerice::loggerevent);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::loggerice::loggerevent::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::loggerice::loggerevent);
}

::IceProxy::Ice::Object*
IceProxy::loggerice::loggerevent::__newInstance() const
{
    return new loggerevent;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::loggerice::loggereventif;
#endif

void
IceProxy::loggerice::loggereventif::sendevent(const ::loggerice::loggereventPtr& theevent, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::loggerice::loggereventif* __del = dynamic_cast< ::IceDelegate::loggerice::loggereventif*>(__delBase.get());
            __del->sendevent(theevent, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::loggerice::loggereventif::begin_sendevent(const ::loggerice::loggereventPtr& theevent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __loggerice__loggereventif__sendevent_name, __del, __cookie);
    try
    {
        __result->__prepare(__loggerice__loggereventif__sendevent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(theevent.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::loggerice::loggereventif::end_sendevent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __loggerice__loggereventif__sendevent_name);
}

const ::std::string&
IceProxy::loggerice::loggereventif::ice_staticId()
{
    return ::loggerice::loggereventif::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::loggerice::loggereventif::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::loggerice::loggereventif);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::loggerice::loggereventif::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::loggerice::loggereventif);
}

::IceProxy::Ice::Object*
IceProxy::loggerice::loggereventif::__newInstance() const
{
    return new loggereventif;
}

void
IceDelegateM::loggerice::loggereventif::sendevent(const ::loggerice::loggereventPtr& theevent, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __loggerice__loggereventif__sendevent_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(theevent.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::loggerice::loggereventif::sendevent(const ::loggerice::loggereventPtr& theevent, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::loggerice::loggereventPtr& theevent, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_theevent(theevent)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::loggerice::loggereventif* servant = dynamic_cast< ::loggerice::loggereventif*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->sendevent(_m_theevent, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::loggerice::loggereventPtr& _m_theevent;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __loggerice__loggereventif__sendevent_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(theevent, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

loggerice::loggerevent::loggerevent(::Ice::Int __ice_type, ::Ice::Long __ice_ts, ::Ice::Int __ice_srctype, ::Ice::Int __ice_srcid, ::Ice::Int __ice_kind, ::Ice::Long __ice_key, ::Ice::Long __ice_timeMs, ::Ice::Long __ice_threadId, ::Ice::Int __ice_procId, ::Ice::Long __ice_subType, ::Ice::Long __ice_value, const ::std::string& __ice_name) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    event(__ice_type, __ice_ts, __ice_srctype, __ice_srcid, __ice_kind, __ice_key, __ice_timeMs, __ice_threadId, __ice_procId)
#else
    ::loggerice::event(__ice_type, __ice_ts, __ice_srctype, __ice_srcid, __ice_kind, __ice_key, __ice_timeMs, __ice_threadId, __ice_procId)
#endif
,
    subType(__ice_subType),
    value(__ice_value),
    name(__ice_name)
{
}

::Ice::ObjectPtr
loggerice::loggerevent::ice_clone() const
{
    ::loggerice::loggereventPtr __p = new ::loggerice::loggerevent(*this);
    return __p;
}

static const ::std::string __loggerice__loggerevent_ids[3] =
{
    "::Ice::Object",
    "::loggerice::event",
    "::loggerice::loggerevent"
};

bool
loggerice::loggerevent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__loggerice__loggerevent_ids, __loggerice__loggerevent_ids + 3, _s);
}

::std::vector< ::std::string>
loggerice::loggerevent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__loggerice__loggerevent_ids[0], &__loggerice__loggerevent_ids[3]);
}

const ::std::string&
loggerice::loggerevent::ice_id(const ::Ice::Current&) const
{
    return __loggerice__loggerevent_ids[2];
}

const ::std::string&
loggerice::loggerevent::ice_staticId()
{
    return __loggerice__loggerevent_ids[2];
}

void
loggerice::loggerevent::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(subType);
    __os->write(value);
    __os->write(name);
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    event::__write(__os);
#else
    ::loggerice::event::__write(__os);
#endif
}

void
loggerice::loggerevent::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(subType);
    __is->read(value);
    __is->read(name);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    event::__read(__is, true);
#else
    ::loggerice::event::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
loggerice::loggerevent::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::loggerevent was not generated with stream support";
    throw ex;
}

void
loggerice::loggerevent::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::loggerevent was not generated with stream support";
    throw ex;
}
#endif

class __F__loggerice__loggerevent : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::loggerice::loggerevent::ice_staticId());
        return new ::loggerice::loggerevent;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__loggerice__loggerevent_Ptr = new __F__loggerice__loggerevent;

const ::Ice::ObjectFactoryPtr&
loggerice::loggerevent::ice_factory()
{
    return __F__loggerice__loggerevent_Ptr;
}

class __F__loggerice__loggerevent__Init
{
public:

    __F__loggerice__loggerevent__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::loggerice::loggerevent::ice_staticId(), ::loggerice::loggerevent::ice_factory());
    }

    ~__F__loggerice__loggerevent__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::loggerice::loggerevent::ice_staticId());
    }
};

static __F__loggerice__loggerevent__Init __F__loggerice__loggerevent__i;

#ifdef __APPLE__
extern "C" { void __F__loggerice__loggerevent__initializer() {} }
#endif

void ICE_DECLSPEC_EXPORT 
loggerice::__patch__loggereventPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::loggerice::loggereventPtr* p = static_cast< ::loggerice::loggereventPtr*>(__addr);
    assert(p);
    *p = ::loggerice::loggereventPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::loggerice::loggerevent::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
loggerice::loggereventif::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __loggerice__loggereventif_ids[2] =
{
    "::Ice::Object",
    "::loggerice::loggereventif"
};

bool
loggerice::loggereventif::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__loggerice__loggereventif_ids, __loggerice__loggereventif_ids + 2, _s);
}

::std::vector< ::std::string>
loggerice::loggereventif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__loggerice__loggereventif_ids[0], &__loggerice__loggereventif_ids[2]);
}

const ::std::string&
loggerice::loggereventif::ice_id(const ::Ice::Current&) const
{
    return __loggerice__loggereventif_ids[1];
}

const ::std::string&
loggerice::loggereventif::ice_staticId()
{
    return __loggerice__loggereventif_ids[1];
}

::Ice::DispatchStatus
loggerice::loggereventif::___sendevent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::loggerice::loggereventPtr theevent;
    __is->read(::loggerice::__patch__loggereventPtr, &theevent);
    __is->readPendingObjects();
    __is->endReadEncaps();
    sendevent(theevent, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __loggerice__loggereventif_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendevent"
};

::Ice::DispatchStatus
loggerice::loggereventif::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__loggerice__loggereventif_all, __loggerice__loggereventif_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __loggerice__loggereventif_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___sendevent(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
loggerice::loggereventif::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
loggerice::loggereventif::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
loggerice::loggereventif::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::loggereventif was not generated with stream support";
    throw ex;
}

void
loggerice::loggereventif::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::loggereventif was not generated with stream support";
    throw ex;
}
#endif

void ICE_DECLSPEC_EXPORT 
loggerice::__patch__loggereventifPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::loggerice::loggereventifPtr* p = static_cast< ::loggerice::loggereventifPtr*>(__addr);
    assert(p);
    *p = ::loggerice::loggereventifPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::loggerice::loggereventif::ice_staticId(), v->ice_id());
    }
}
