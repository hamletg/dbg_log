// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `dbg_class_event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __log_ice_ice_clean_slice___dbg_class_event_h__
#define __log_ice_ice_clean_slice___dbg_class_event_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <log_ice/ice/event.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace loggerice
{

class dbgclassevent;

class dbgclasseventif;

}

}

namespace loggerice
{

class dbgclassevent;
bool operator==(const dbgclassevent&, const dbgclassevent&);
bool operator<(const dbgclassevent&, const dbgclassevent&);

class dbgclasseventif;
bool operator==(const dbgclasseventif&, const dbgclasseventif&);
bool operator<(const dbgclasseventif&, const dbgclasseventif&);

}

namespace IceInternal
{

::Ice::Object* upCast(::loggerice::dbgclassevent*);
::IceProxy::Ice::Object* upCast(::IceProxy::loggerice::dbgclassevent*);

::Ice::Object* upCast(::loggerice::dbgclasseventif*);
::IceProxy::Ice::Object* upCast(::IceProxy::loggerice::dbgclasseventif*);

}

namespace loggerice
{

typedef ::IceInternal::Handle< ::loggerice::dbgclassevent> dbgclasseventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::loggerice::dbgclassevent> dbgclasseventPrx;

void __read(::IceInternal::BasicStream*, dbgclasseventPrx&);
void __patch__dbgclasseventPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::loggerice::dbgclasseventif> dbgclasseventifPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::loggerice::dbgclasseventif> dbgclasseventifPrx;

void __read(::IceInternal::BasicStream*, dbgclasseventifPrx&);
void __patch__dbgclasseventifPtr(void*, ::Ice::ObjectPtr&);

}

namespace loggerice
{

class Callback_dbgclasseventif_sendevent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_dbgclasseventif_sendevent_Base> Callback_dbgclasseventif_sendeventPtr;

}

namespace IceProxy
{

namespace loggerice
{

class dbgclassevent : virtual public ::IceProxy::loggerice::event
{
public:
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclassevent> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclassevent*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<dbgclassevent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class dbgclasseventif : virtual public ::IceProxy::Ice::Object
{
public:

    void sendevent(const ::loggerice::dbgclasseventPtr& theevent)
    {
        sendevent(theevent, 0);
    }
    void sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::Ice::Context& __ctx)
    {
        sendevent(theevent, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent)
    {
        return begin_sendevent(theevent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::Ice::Context& __ctx)
    {
        return begin_sendevent(theevent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendevent(theevent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendevent(theevent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::loggerice::Callback_dbgclasseventif_sendeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendevent(theevent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr& theevent, const ::Ice::Context& __ctx, const ::loggerice::Callback_dbgclasseventif_sendeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendevent(theevent, &__ctx, __del, __cookie);
    }

    void end_sendevent(const ::Ice::AsyncResultPtr&);
    
private:

    void sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<dbgclasseventif> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<dbgclasseventif*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<dbgclasseventif*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace loggerice
{

class dbgclassevent : virtual public ::IceDelegate::loggerice::event
{
public:
};

class dbgclasseventif : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace loggerice
{

class dbgclassevent : virtual public ::IceDelegate::loggerice::dbgclassevent,
                      virtual public ::IceDelegateM::loggerice::event
{
public:
};

class dbgclasseventif : virtual public ::IceDelegate::loggerice::dbgclasseventif,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace loggerice
{

class dbgclassevent : virtual public ::IceDelegate::loggerice::dbgclassevent,
                      virtual public ::IceDelegateD::loggerice::event
{
public:
};

class dbgclasseventif : virtual public ::IceDelegate::loggerice::dbgclasseventif,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Context*);
};

}

}

namespace loggerice
{

class dbgclassevent : public ::loggerice::event
{
public:

    typedef dbgclasseventPrx ProxyType;
    typedef dbgclasseventPtr PointerType;
    
    dbgclassevent() {}
    dbgclassevent(::Ice::Int, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Int, ::Ice::Long);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~dbgclassevent() {}

    friend class dbgclassevent__staticInit;

public:

    ::Ice::Long depth;

    ::std::string callTxt;

    ::Ice::Int subType;

    ::Ice::Long elapsedTime;
};

class dbgclassevent__staticInit
{
public:

    ::loggerice::dbgclassevent _init;
};

static dbgclassevent__staticInit _dbgclassevent_init;

inline bool operator==(const dbgclassevent& l, const dbgclassevent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const dbgclassevent& l, const dbgclassevent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class dbgclasseventif : virtual public ::Ice::Object
{
public:

    typedef dbgclasseventifPrx ProxyType;
    typedef dbgclasseventifPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendevent(const ::loggerice::dbgclasseventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendevent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const dbgclasseventif& l, const dbgclasseventif& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const dbgclasseventif& l, const dbgclasseventif& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace loggerice
{

template<class T>
class CallbackNC_dbgclasseventif_sendevent : public Callback_dbgclasseventif_sendevent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_dbgclasseventif_sendevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_dbgclasseventif_sendevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_dbgclasseventif_sendevent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_dbgclasseventif_sendevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_dbgclasseventif_sendevent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_dbgclasseventif_sendevent : public Callback_dbgclasseventif_sendevent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_dbgclasseventif_sendevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_dbgclasseventif_sendevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_dbgclasseventif_sendevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_dbgclasseventif_sendevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_dbgclasseventif_sendeventPtr
newCallback_dbgclasseventif_sendevent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_dbgclasseventif_sendevent<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
