// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef LOG_ICE_API_EXPORTS
#   define LOG_ICE_API_EXPORTS
#endif
#include <log_ice/ice/event.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

ICE_DECLSPEC_EXPORT ::Ice::Object* IceInternal::upCast(::loggerice::event* p) { return p; }
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::loggerice::event* p) { return p; }

void
loggerice::__read(::IceInternal::BasicStream* __is, ::loggerice::eventPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::loggerice::event;
        v->__copyFrom(proxy);
    }
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::loggerice::event;
#endif

const ::std::string&
IceProxy::loggerice::event::ice_staticId()
{
    return ::loggerice::event::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::loggerice::event::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::loggerice::event);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::loggerice::event::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::loggerice::event);
}

::IceProxy::Ice::Object*
IceProxy::loggerice::event::__newInstance() const
{
    return new event;
}

loggerice::event::event(::Ice::Int __ice_type, ::Ice::Long __ice_ts, ::Ice::Int __ice_srctype, ::Ice::Int __ice_srcid, ::Ice::Int __ice_kind, ::Ice::Long __ice_key, ::Ice::Long __ice_timeMs, ::Ice::Long __ice_threadId, ::Ice::Int __ice_procId) :
    type(__ice_type),
    ts(__ice_ts),
    srctype(__ice_srctype),
    srcid(__ice_srcid),
    kind(__ice_kind),
    key(__ice_key),
    timeMs(__ice_timeMs),
    threadId(__ice_threadId),
    procId(__ice_procId)
{
}

::Ice::ObjectPtr
loggerice::event::ice_clone() const
{
    ::loggerice::eventPtr __p = new ::loggerice::event(*this);
    return __p;
}

static const ::std::string __loggerice__event_ids[2] =
{
    "::Ice::Object",
    "::loggerice::event"
};

bool
loggerice::event::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__loggerice__event_ids, __loggerice__event_ids + 2, _s);
}

::std::vector< ::std::string>
loggerice::event::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__loggerice__event_ids[0], &__loggerice__event_ids[2]);
}

const ::std::string&
loggerice::event::ice_id(const ::Ice::Current&) const
{
    return __loggerice__event_ids[1];
}

const ::std::string&
loggerice::event::ice_staticId()
{
    return __loggerice__event_ids[1];
}

void
loggerice::event::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(type);
    __os->write(ts);
    __os->write(srctype);
    __os->write(srcid);
    __os->write(kind);
    __os->write(key);
    __os->write(timeMs);
    __os->write(threadId);
    __os->write(procId);
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
loggerice::event::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(type);
    __is->read(ts);
    __is->read(srctype);
    __is->read(srcid);
    __is->read(kind);
    __is->read(key);
    __is->read(timeMs);
    __is->read(threadId);
    __is->read(procId);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
loggerice::event::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::event was not generated with stream support";
    throw ex;
}

void
loggerice::event::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type loggerice::event was not generated with stream support";
    throw ex;
}
#endif

class __F__loggerice__event : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::loggerice::event::ice_staticId());
        return new ::loggerice::event;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__loggerice__event_Ptr = new __F__loggerice__event;

const ::Ice::ObjectFactoryPtr&
loggerice::event::ice_factory()
{
    return __F__loggerice__event_Ptr;
}

class __F__loggerice__event__Init
{
public:

    __F__loggerice__event__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::loggerice::event::ice_staticId(), ::loggerice::event::ice_factory());
    }

    ~__F__loggerice__event__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::loggerice::event::ice_staticId());
    }
};

static __F__loggerice__event__Init __F__loggerice__event__i;

#ifdef __APPLE__
extern "C" { void __F__loggerice__event__initializer() {} }
#endif

void ICE_DECLSPEC_EXPORT 
loggerice::__patch__eventPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::loggerice::eventPtr* p = static_cast< ::loggerice::eventPtr*>(__addr);
    assert(p);
    *p = ::loggerice::eventPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::loggerice::event::ice_staticId(), v->ice_id());
    }
}
