// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef LOG_ICE_API_EXPORTS
#   define LOG_ICE_API_EXPORTS
#endif
#include <log_ice/ice/event.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::loggerice::event;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::loggerice::upCast(::IceProxy::loggerice::event* p) { return p; }

void
::IceProxy::loggerice::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::loggerice::event>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::loggerice::event;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::loggerice::event::ice_staticId()
{
    return ::loggerice::event::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::loggerice::event::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::loggerice::event);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::loggerice::event::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::loggerice::event);
}

::IceProxy::Ice::Object*
IceProxy::loggerice::event::__newInstance() const
{
    return new event;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* loggerice::upCast(::loggerice::event* p) { return p; }
::Ice::ObjectPtr
loggerice::event::ice_clone() const
{
    ::Ice::Object* __p = new event(*this);
    return __p;
}

namespace
{
const ::std::string __loggerice__event_ids[2] =
{
    "::Ice::Object",
    "::loggerice::event"
};

}

bool
loggerice::event::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__loggerice__event_ids, __loggerice__event_ids + 2, _s);
}

::std::vector< ::std::string>
loggerice::event::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__loggerice__event_ids[0], &__loggerice__event_ids[2]);
}

const ::std::string&
loggerice::event::ice_id(const ::Ice::Current&) const
{
    return __loggerice__event_ids[1];
}

const ::std::string&
loggerice::event::ice_staticId()
{
    return __loggerice__event_ids[1];
}

void
loggerice::event::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(type);
    __os->write(ts);
    __os->write(srctype);
    __os->write(srcid);
    __os->write(kind);
    __os->write(key);
    __os->write(timeMs);
    __os->write(threadId);
    __os->write(regId);
    __os->endWriteSlice();
}

void
loggerice::event::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(type);
    __is->read(ts);
    __is->read(srctype);
    __is->read(srcid);
    __is->read(kind);
    __is->read(key);
    __is->read(timeMs);
    __is->read(threadId);
    __is->read(regId);
    __is->endReadSlice();
}

namespace
{

class __F__loggerice__event : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::loggerice::event::ice_staticId());
        return new ::loggerice::event;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__loggerice__event_Ptr = new __F__loggerice__event;

class __F__loggerice__event__Init
{
public:

    __F__loggerice__event__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::loggerice::event::ice_staticId(), __F__loggerice__event_Ptr);
    }

    ~__F__loggerice__event__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::loggerice::event::ice_staticId());
    }
};

const __F__loggerice__event__Init __F__loggerice__event__i;

}

const ::Ice::ObjectFactoryPtr&
loggerice::event::ice_factory()
{
    return __F__loggerice__event_Ptr;
}

void ICE_DECLSPEC_EXPORT 
loggerice::__patch(eventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::loggerice::eventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::loggerice::event::ice_staticId(), v);
    }
}
